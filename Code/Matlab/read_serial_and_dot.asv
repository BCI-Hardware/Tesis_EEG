%**************************************************************************
%                            TESIS DE GRADO
%                               EEG v1.0
%                   Instituto de Ingenieria Biomédica
%           Facultad de Ingenieria, Universidad de Buenos Aires
%
%                           Florencia Grosso
%                           Tutor: Sergio Lew
%
%  Code description:
%  This code reads the data sent by the IC ADS1299 through an Arduino NANO.
%  It saves it in a txt file which will be passed then to a plotter
%  function.  
%**************************************************************************
close all
clear

%% SERIAL PORT
% Delete all serial port objects, regardless of the value of the object's 
% ObjectVisibility property
delete(instrfindall)

% Create a serial port associated with COM5
s = 'COM5';
serial_port = serial(s);
serial_port.BaudRate = 115200;
serial_port.DataBits = 8;
serial_port.Parity = 'none';
serial_port.StopBits = 1;
serial_port.inputBufferSize = 2056;

% Perform serial port clean up
fopen(serial_port)
pause(6)
flushinput(serial_port)
flushoutput(serial_port)
pause(1)
fwrite(serial_port,'1');
pause(1)

%% OUTPUT FILES SET UP
% Create files to save data to. Make the names out of the current date,
% to avoid stepping over.
% current_date = datestr(now, 'dd_mm_yyyy_HH_MM_SS');
current_date = '26_09_2019_18_27_14';

% File to store positions of random dots to
test_stimuli_file_name = strcat('data/', current_date, '_test_ch2.mat');
cal_stimuli_file_name = strcat('data/', current_date, '_cal_ch2.mat');
pred_stimuli_file_name = strcat('data/', current_date, '_pred_ch2.mat');

% File to store eeg channel data to
cal_eeg_file_name = strcat('data/', current_date, '_cal_ch2.txt');
% cal_eeg_file_id = fopen(cal_eeg_file_name,'w');
test_eeg_file_name = strcat('data/', current_date, '_test_ch2.txt');
test_eeg_file_id = fopen(test_eeg_file_name,'w');

%% CALIBRATION STAGE

% CONFIG
samples = 500;
% Configuration for the dot displacing screen
current_cycle = 0;
seconds_per_stimuli = 3;
N_dots = 12;
calibration_cycles = (N_dots + 6) * seconds_per_stimuli;


% Initial bell
res = 100050;
len = 0.5 * res;
sound( sin( 400*(2*pi*(0:len)/res) ), res);

while(current_cycle < calibration_cycles)
    % On first pass, clean the port and start the dot generator
    if current_cycle == 0
        flushinput(serial_port)
        flushoutput(serial_port)
        cal_gui = calibrator_gui(seconds_per_stimuli, N_dots, cal_stimuli_file_name);
        cal_fig = figure(cal_gui);
    end
   
    c = fread(serial_port, samples, 'float');
    
    %Print channel data to file
    fprintf(cal_eeg_file_id, '%f\n', c);    
    current_cycle = current_cycle + 1; 
end

close all;
% Close file with calibration data
fclose(cal_eeg_file_id);

%%
% Process data and get calibration values
n = 50;
[raw_signal, derivative] = process_calibration_data(cal_eeg_file_name, n);

figure
plot(raw_signal(:,1));
figure
plot(derivative(:,1));
figure
plot(raw_signal(:,2));
figure
plot(derivative(:,2));

%% Get calibration values
% NOTE: this is computed manually, observing the calibration output from
% above. Consider automating this properly.

% cal(1): max amplitude allowed from center to left/right
% cal(2): max amplitude allowed from center to up/down
cal = [435 200];
alpha = 0;
blinks_thr = 230;

%% TEST

% CONFIG
samples = 500;
% Configuration for the 'X' displacing screen
seconds_per_stimuli = 3;
N_stimuli = 30;
n_derivative = 50;

% Initial bell
res = 100050;
len = 0.5 * res;
sound(sin(400*(2*pi*(0:len)/res)), res);

gui = dot_generator_2(seconds_per_stimuli, N_stimuli, test_stimuli_file_name, test_eeg_file_id, pred_stimuli_file_name, serial_port, cal, alpha, blinks_thr);
h = figure(gui);

% Wait until the test is finished and the serial port is closed
while strcmp(serial_port.Status, 'open')
    sleep(5)
end

delete(instrfindall);

% Final bell
sound(sin(400*(2*pi*(0:len)/res)), res);
disp('Finished recording');

close all;